diff -Naur linux-2.4.28.pristine/Makefile linux-2.4.28/Makefile
--- linux-2.4.28.pristine/Makefile	2004-11-17 11:54:22.000000000 +0000
+++ linux-2.4.28/Makefile	2006-01-14 15:00:04.000000000 +0000
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 4
 SUBLEVEL = 28
-EXTRAVERSION =
+EXTRAVERSION = -afterburn
 
 KERNELRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 
@@ -128,7 +137,7 @@
 NETWORKS	=net/network.o
 
 LIBS		=$(TOPDIR)/lib/lib.a
-SUBDIRS		=kernel drivers mm fs net ipc lib crypto
+SUBDIRS		=kernel drivers mm fs net ipc lib crypto afterburn
 
 DRIVERS-n :=
 DRIVERS-y :=
@@ -161,6 +170,7 @@
 DRIVERS-y += drivers/cdrom/driver.o
 endif
 
+DRIVERS-$(CONFIG_AFTERBURN) += afterburn/afterburn-turd.o
 DRIVERS-$(CONFIG_SOUND) += drivers/sound/sounddrivers.o
 DRIVERS-$(CONFIG_PCI) += drivers/pci/driver.o
 DRIVERS-$(CONFIG_MTD) += drivers/mtd/mtdlink.o
@@ -201,7 +211,7 @@
 # files removed with 'make clean'
 CLEAN_FILES = \
 	kernel/ksyms.lst include/linux/compile.h \
-	vmlinux System.map \
+	vmlinux System.map vmlinux.stripped vmlinuz \
 	.tmp* \
 	drivers/char/consolemap_deftbl.c drivers/video/promcon_tbl.c \
 	drivers/char/conmakehash \
diff -Naur linux-2.4.28.pristine/afterburn/Config.in linux-2.4.28/afterburn/Config.in
--- linux-2.4.28.pristine/afterburn/Config.in	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.4.28/afterburn/Config.in	2006-01-14 14:49:31.000000000 +0000
@@ -0,0 +1,42 @@
+
+mainmenu_option next_comment
+comment "Afterburn"
+
+bool "Afterburn pre-virtualization?" CONFIG_AFTERBURN
+if [ "$CONFIG_AFTERBURN" = "y" ] ; then
+
+  bool "Support the L4Ka::Pistachio environment?" CONFIG_AFTERBURN_L4KA
+  bool "Support the Xen environment?" CONFIG_AFTERBURN_XEN
+  bool "Permit pass-through device access?" CONFIG_AFTERBURN_DEVICE_PASSTHRU
+
+  mainmenu_option next_comment
+  comment "Advanced"
+    bool "Relink the Linux kernel at a new address?" CONFIG_AFTERBURN_RELINK
+    if [ "$CONFIG_AFTERBURN_RELINK" = "y" ] ; then
+      hex "The kernel link address" CONFIG_AFTERBURN_LINK_BASE 0x80000000
+      hex "The end of the kernel virtual address space" CONFIG_AFTERBURN_VADDR_END 0xbc000000
+    fi
+    bool "Permit the virtual machine to hook user data access?" CONFIG_AFTERBURN_HOOK_UACCESS
+    bool "Permit the virtual machine to hook DMA translation?" CONFIG_AFTERBURN_HOOK_DMA
+    bool "Extra afterburn hooks required for Xen?" CONFIG_AFTERBURN_XEN_HOOKS
+    bool "Permit the virtual machine to hook high-level thread operations?" CONFIG_AFTERBURN_THREAD_HOOKS
+    bool "Support dynamic kernel module loading?" CONFIG_AFTERBURN_MODULE_HOOKS
+  endmenu
+fi
+
+  if [ "$CONFIG_AFTERBURN_L4KA" = "y" ] ; then
+    define_bool CONFIG_AFTERBURN_RELINK y
+    define_bool CONFIG_AFTERBURN_HOOK_UACCESS y
+    define_bool CONFIG_AFTERBURN_THREAD_HOOKS y
+    define_bool CONFIG_AFTERBURN_MODULE_HOOKS y
+  fi
+  if [ "$CONFIG_AFTERBURN_XEN" = "y" ] ; then
+    define_bool CONFIG_AFTERBURN_RELINK y
+    define_bool CONFIG_AFTERBURN_HOOK_UACCESS y
+    define_bool CONFIG_AFTERBURN_XEN_HOOKS y
+    define_bool CONFIG_AFTERBURN_MODULE_HOOKS y
+  fi
+  if [ "$CONFIG_AFTERBURN_DEVICE_PASSTHRU" = "y" ] ; then
+    define_bool CONFIG_AFTERBURN_HOOK_DMA y
+  fi
+endmenu
diff -Naur linux-2.4.28.pristine/afterburn/Makefile linux-2.4.28/afterburn/Makefile
--- linux-2.4.28.pristine/afterburn/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.4.28/afterburn/Makefile	2006-01-14 14:49:31.000000000 +0000
@@ -0,0 +1,7 @@
+
+O_TARGET := afterburn-turd.o
+
+obj-$(CONFIG_AFTERBURN) += afterburn.o
+
+include $(TOPDIR)/Rules.make
+
diff -Naur linux-2.4.28.pristine/afterburn/afterburn.c linux-2.4.28/afterburn/afterburn.c
--- linux-2.4.28.pristine/afterburn/afterburn.c	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.4.28/afterburn/afterburn.c	2006-01-14 14:49:31.000000000 +0000
@@ -0,0 +1,116 @@
+
+#include <linux/sched.h>
+#include <linux/module.h>
+#include <asm/current.h>
+#include <asm/pgtable.h>
+
+// Exports to the afterburn wedge.
+
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+void * afterburn_thread_get_handle( void )
+{
+    return current->afterburn_handle;
+}
+
+void afterburn_thread_assign_handle( void * handle )
+{
+    current->afterburn_handle = handle;
+}
+
+
+// Imports from the afterburn wedge.  If these hooks are in the bss,
+// Linux will zero them after the wedge has hooked them.
+
+void afterburn_exit_thread( void *handle )
+{
+    // Dummy
+}
+
+int afterburn_signal_thread( void *handle )
+{
+    // Dummy
+    return 0;
+}
+
+void (*afterburn_exit_hook)( void *handle ) = afterburn_exit_thread;
+int (*afterburn_signal_hook)( void *handle ) = afterburn_signal_thread;
+#endif	/* CONFIG_AFTERBURN_THREAD_HOOKS */
+
+#if defined(CONFIG_AFTERBURN_MODULE_HOOKS)
+__attribute__((section(".data"))) int (*afterburn_rewrite_module_hook)( unsigned long ) = NULL;
+#endif
+
+#if defined(CONFIG_AFTERBURN_HOOK_UACCESS)
+__attribute__((section(".data"))) unsigned long (*afterburn_get_user_hook)(void *to, const void *from, unsigned long n)  = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_put_user_hook)(void *to, const void *from, unsigned long n) = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_copy_from_user_hook)(void *to, const void *from, unsigned long n)  = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_copy_to_user_hook)(void *to, const void *from, unsigned long n) = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_clear_user_hook)(void *to, unsigned long n) = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_strnlen_user_hook)(const char *s, unsigned long n) = NULL;
+__attribute__((section(".data"))) unsigned long (*afterburn_strncpy_from_user_hook)(char *dst, const char *src, unsigned long n, unsigned long *success) = NULL;
+#endif
+
+#if defined(CONFIG_AFTERBURN_HOOK_DMA)
+__attribute__((section(".data"))) unsigned long (*afterburn_phys_to_dma_hook)(unsigned long phys);
+__attribute__((section(".data"))) unsigned long (*afterburn_dma_to_phys_hook)(unsigned long dma);
+#endif
+
+#define EXPORT_THREAD_GET_HANDLE	0
+#define EXPORT_THREAD_SET_HANDLE	1
+
+#define IMPORT_EXIT_HOOK		0
+#define IMPORT_SET_PTE_HOOK		1
+#define IMPORT_GET_USER_HOOK		2
+#define IMPORT_PUT_USER_HOOK		3
+#define IMPORT_COPY_FROM_USER_HOOK	4
+#define IMPORT_COPY_TO_USER_HOOK	5
+#define IMPORT_CLEAR_USER_HOOK		6
+#define IMPORT_STRNLEN_USER_HOOK	7
+#define IMPORT_STRNCPY_FROM_USER_HOOK	8
+#define IMPORT_READ_PTE_HOOK		9
+#define IMPORT_PTE_TEST_AND_CLEAR_HOOK	10
+#define IMPORT_PTE_GET_AND_CLEAR_HOOK	11
+#define IMPORT_PHYS_TO_DMA_HOOK		12
+#define IMPORT_DMA_TO_PHYS_HOOK		13
+#define IMPORT_FREE_PGD_HOOK		14
+#define IMPORT_REWRITE_MODULE_HOOK	15
+#define IMPORT_SIGNAL_HOOK		16
+
+// These macros install the info into an unallocated ELF section.
+#define AFTERBURN_EXPORT( id, func ) \
+    asm ( ".pushsection .afterburn.exports;" \
+	    ".long " MKSTR(id) ";" \
+	    ".long " MKSTR(func) ";" \
+	    ".popsection;" )
+#define AFTERBURN_IMPORT( id, ptr ) \
+    asm ( ".pushsection .afterburn.imports;" \
+	    ".long " MKSTR(id) ";" \
+	    ".long " MKSTR(ptr) ";" \
+	    ".popsection;" )
+
+#define MKSTR(sym)	MKSTR2(sym)
+#define MKSTR2(sym)	#sym
+
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+AFTERBURN_EXPORT( EXPORT_THREAD_GET_HANDLE, afterburn_thread_get_handle );
+AFTERBURN_EXPORT( EXPORT_THREAD_SET_HANDLE, afterburn_thread_assign_handle );
+AFTERBURN_IMPORT( IMPORT_EXIT_HOOK, afterburn_exit_hook );
+AFTERBURN_IMPORT( IMPORT_SIGNAL_HOOK, afterburn_signal_hook );
+#endif
+#if defined(CONFIG_AFTERBURN_HOOK_UACCESS)
+AFTERBURN_IMPORT( IMPORT_GET_USER_HOOK, afterburn_get_user_hook );
+AFTERBURN_IMPORT( IMPORT_COPY_FROM_USER_HOOK, afterburn_copy_from_user_hook );
+AFTERBURN_IMPORT( IMPORT_PUT_USER_HOOK, afterburn_put_user_hook );
+AFTERBURN_IMPORT( IMPORT_COPY_TO_USER_HOOK, afterburn_copy_to_user_hook );
+AFTERBURN_IMPORT( IMPORT_CLEAR_USER_HOOK, afterburn_clear_user_hook );
+AFTERBURN_IMPORT( IMPORT_STRNLEN_USER_HOOK, afterburn_strnlen_user_hook );
+AFTERBURN_IMPORT( IMPORT_STRNCPY_FROM_USER_HOOK, afterburn_strncpy_from_user_hook );
+#endif
+#if defined(CONFIG_AFTERBURN_HOOK_DMA)
+AFTERBURN_IMPORT( IMPORT_PHYS_TO_DMA_HOOK, afterburn_phys_to_dma_hook );
+AFTERBURN_IMPORT( IMPORT_DMA_TO_PHYS_HOOK, afterburn_dma_to_phys_hook );
+#endif
+#if defined(CONFIG_AFTERBURN_MODULE_HOOKS)
+AFTERBURN_IMPORT( IMPORT_REWRITE_MODULE_HOOK, afterburn_rewrite_module_hook );
+#endif
+
diff -Naur linux-2.4.28.pristine/afterburn/annotate.h linux-2.4.28/afterburn/annotate.h
--- linux-2.4.28.pristine/afterburn/annotate.h	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.4.28/afterburn/annotate.h	2006-01-14 14:49:31.000000000 +0000
@@ -0,0 +1,222 @@
+#ifndef __AFTERBURN__ANNOTATE_H__
+#define __AFTERBURN__ANNOTATE_H__
+
+#include <asm/bitops.h>
+
+#define pgd_read_annotate( pgd ) ({ \
+    unsigned long temp; \
+    __asm__ ( \
+	    "7777:" \
+	    "mov %1, %0\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "7778:" \
+	    ".pushsection .afterburn.pgd_read\n" \
+	    ".align 4\n" \
+	    ".long 7777b\n" \
+	    ".long 7778b\n" \
+	    ".popsection\n" \
+	    : "=r"(temp) : "m"(pgd) ); \
+    temp; })
+
+
+#define pte_read_annotate( pte ) ({ \
+    unsigned long temp; \
+    __asm__ ( \
+	    "7777:" \
+	    "mov %1, %0\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "nop\n" \
+	    "7778:" \
+	    ".pushsection .afterburn.pte_read\n" \
+	    ".align 4\n" \
+	    ".long 7777b\n" \
+	    ".long 7778b\n" \
+	    ".popsection\n" \
+	    : "=r"(temp) : "m"(pte) ); \
+    temp; })
+
+static inline void 
+pte_set_annotate(pte_t *addr, unsigned long val )
+{
+    __asm__ (
+	    "7777:"
+	    "mov %1, %0\n" 
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "7778:"
+	    ".pushsection .afterburn.pte_set\n"
+	    ".align 4\n"
+	    ".long 7777b\n"
+	    ".long 7778b\n"
+	    ".popsection\n"
+	    : "=m"(*addr) : "r"(val), "m"(*addr) );
+}
+
+static inline void 
+pgd_set_annotate(pgd_t *addr, unsigned long val )
+{
+    __asm__ (
+	    "7777:"
+	    "mov %1, %0\n" 
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "7778:"
+	    ".pushsection .afterburn.pgd_set\n"
+	    ".align 4\n"
+	    ".long 7777b\n"
+	    ".long 7778b\n"
+	    ".popsection\n"
+	    : "=m"(*addr) : "r"(val) );
+}
+
+static inline void 
+pmd_set_annotate(pmd_t *addr, unsigned long val )
+{
+    __asm__ (
+	    "7777:"
+	    "mov %1, %0\n" 
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "7778:"
+	    ".pushsection .afterburn.pmd_set\n"
+	    ".align 4\n"
+	    ".long 7777b\n"
+	    ".long 7778b\n"
+	    ".popsection\n"
+	    : "=m"(*addr) : "r"(val) );
+}
+
+static inline int pte_test_and_clear_bit_annotate( int bit, volatile pte_t *ptep )
+{
+    int oldbit;
+
+    __asm__ (
+	    "7777:"
+	    LOCK_PREFIX
+	    "btrl %2, %1\n"
+	    "sbbl %0, %0\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "7778:"
+	    ".pushsection .afterburn.pte_test_clear\n"
+	    ".align 4\n"
+	    ".long 7777b\n"
+	    ".long 7778b\n"
+	    ".popsection\n"
+	    : "=a"(oldbit), "=m"(*(volatile long *)ptep)
+	    : "0"(bit) );
+    return oldbit;
+}
+
+static inline pte_t
+pte_read_clear_annotate( pte_t *pteptr )
+{
+    pte_t x = {0};
+
+    __asm__ (
+	    "7777:"
+	    "xchgl %0, %1\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "nop\n"
+	    "7778:"
+	    ".pushsection .afterburn.pte_read\n"
+	    ".align 4\n"
+	    ".long 7777b\n"
+	    ".long 7778b\n"
+	    ".popsection\n"
+	    : "=r"(x) 
+	    : "m"(*(volatile unsigned long *)pteptr), "0"(x)
+	    : "memory" );
+
+    return x;
+}
+
+
+
+
+#endif /* __AFTERBURN__ANNOTATE_H__ */
diff -Naur linux-2.4.28.pristine/arch/i386/Makefile linux-2.4.28/arch/i386/Makefile
--- linux-2.4.28.pristine/arch/i386/Makefile	2004-11-17 11:54:21.000000000 +0000
+++ linux-2.4.28/arch/i386/Makefile	2006-01-14 15:05:44.000000000 +0000
@@ -18,8 +18,12 @@
 
 LD=$(CROSS_COMPILE)ld -m elf_i386
 OBJCOPY=$(CROSS_COMPILE)objcopy -O binary -R .note -R .comment -S
+ifdef CONFIG_AFTERBURN
+LDFLAGS=-e startup_32
+else
 LDFLAGS=-e stext
-LINKFLAGS =-T $(TOPDIR)/arch/i386/vmlinux.lds $(LDFLAGS)
+endif
+LINKFLAGS =-T $(TOPDIR)/arch/i386/vmlinux.lds.turd $(LDFLAGS)
 
 CFLAGS += -pipe
 
@@ -118,7 +122,10 @@
 
 MAKEBOOT = $(MAKE) -C arch/$(ARCH)/boot
 
-vmlinux: arch/i386/vmlinux.lds
+vmlinux: arch/i386/vmlinux.lds.turd
+
+arch/i386/vmlinux.lds.turd: arch/i386/vmlinux.lds
+	$(CPP) $(CPPFLAGS) -P -C -U$(ARCH) -D__ASSEMBLY__ -x assembler-with-cpp -o $@ $<
 
 FORCE: ;
 
@@ -151,6 +158,7 @@
 	@$(MAKEBOOT) BOOTIMAGE=bzImage install
 
 archclean:
+	rm -f arch/i386/vmlinux.lds.turd
 	@$(MAKEBOOT) clean
 
 archmrproper:
diff -Naur linux-2.4.28.pristine/arch/i386/config.in linux-2.4.28/arch/i386/config.in
--- linux-2.4.28.pristine/arch/i386/config.in	2004-11-17 11:54:21.000000000 +0000
+++ linux-2.4.28/arch/i386/config.in	2006-01-14 14:49:31.000000000 +0000
@@ -9,6 +9,8 @@
 
 define_bool CONFIG_UID16 y
 
+source afterburn/Config.in
+
 mainmenu_option next_comment
 comment 'Code maturity level options'
 bool 'Prompt for development and/or incomplete code/drivers' CONFIG_EXPERIMENTAL
diff -Naur linux-2.4.28.pristine/arch/i386/kernel/head.S linux-2.4.28/arch/i386/kernel/head.S
--- linux-2.4.28.pristine/arch/i386/kernel/head.S	2003-11-28 18:26:19.000000000 +0000
+++ linux-2.4.28/arch/i386/kernel/head.S	2006-01-14 14:49:31.000000000 +0000
@@ -41,6 +41,7 @@
  *
  * On entry, %esi points to the real-mode code as a 32-bit pointer.
  */
+ENTRY(startup_32)
 startup_32:
 /*
  * Set segments to known values
@@ -98,10 +99,14 @@
 	movl %cr0,%eax
 	orl $0x80000000,%eax
 	movl %eax,%cr0		/* ..and set paging (PG) bit */
+#if defined(CONFIG_AFTERBURN)
+	ljmp $__KERNEL_CS,$1f	/* Clear prefetch and normalize %eip */
+#else
 	jmp 1f			/* flush the prefetch-queue */
 1:
 	movl $1f,%eax
 	jmp *%eax		/* make sure eip is relocated */
+#endif
 1:
 	/* Set up the stack pointer */
 	lss stack_start,%esp
diff -Naur linux-2.4.28.pristine/arch/i386/kernel/signal.c linux-2.4.28/arch/i386/kernel/signal.c
--- linux-2.4.28.pristine/arch/i386/kernel/signal.c	2004-11-17 11:54:21.000000000 +0000
+++ linux-2.4.28/arch/i386/kernel/signal.c	2006-01-14 14:49:31.000000000 +0000
@@ -585,6 +585,9 @@
 {
 	siginfo_t info;
 	struct k_sigaction *ka;
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+	extern int (*afterburn_signal_hook)(void *handle);
+#endif
 
 	/*
 	 * We want the common case to go fast, which
@@ -598,6 +601,10 @@
 	if (!oldset)
 		oldset = &current->blocked;
 
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+	if( !afterburn_signal_hook ||
+		!afterburn_signal_hook(current->afterburn_handle) )
+#endif
 	for (;;) {
 		unsigned long signr;
 
diff -Naur linux-2.4.28.pristine/arch/i386/mm/init.c linux-2.4.28/arch/i386/mm/init.c
--- linux-2.4.28.pristine/arch/i386/mm/init.c	2004-04-14 13:05:25.000000000 +0000
+++ linux-2.4.28/arch/i386/mm/init.c	2006-01-14 14:49:31.000000000 +0000
@@ -261,7 +261,7 @@
 				vaddr = i*PGDIR_SIZE + j*PMD_SIZE + k*PAGE_SIZE;
 				if (end && (vaddr >= end))
 					break;
-				*pte = mk_pte_phys(__pa(vaddr), PAGE_KERNEL);
+				set_pte(pte, mk_pte_phys(__pa(vaddr), PAGE_KERNEL));
 			}
 			set_pmd(pmd, __pmd(_KERNPG_TABLE + __pa(pte_base)));
 			if (pte_base != pte_offset(pmd, 0))
@@ -275,7 +275,11 @@
 	 * created - mappings will be set by set_fixmap():
 	 */
 	vaddr = __fix_to_virt(__end_of_fixed_addresses - 1) & PMD_MASK;
+#if defined(CONFIG_AFTERBURN_RELINK)
+	fixrange_init(vaddr, CONFIG_AFTERBURN_VADDR_END, pgd_base);
+#else
 	fixrange_init(vaddr, 0, pgd_base);
+#endif
 
 #if CONFIG_HIGHMEM
 	/*
@@ -399,12 +403,12 @@
 	pmd = pmd_offset(pgd, vaddr);
 	pte = pte_offset(pmd, vaddr);
 	old_pte = *pte;
-	*pte = mk_pte_phys(0, PAGE_READONLY);
+	set_pte(pte, mk_pte_phys(0, PAGE_READONLY));
 	local_flush_tlb();
 
 	boot_cpu_data.wp_works_ok = do_test_wp_bit(vaddr);
 
-	*pte = old_pte;
+	set_pte(pte, old_pte);
 	local_flush_tlb();
 
 	if (!boot_cpu_data.wp_works_ok) {
diff -Naur linux-2.4.28.pristine/arch/i386/vmlinux.lds linux-2.4.28/arch/i386/vmlinux.lds
--- linux-2.4.28.pristine/arch/i386/vmlinux.lds	2002-02-25 19:37:53.000000000 +0000
+++ linux-2.4.28/arch/i386/vmlinux.lds	2006-01-14 14:49:31.000000000 +0000
@@ -1,12 +1,16 @@
 /* ld script to make i386 Linux kernel
  * Written by Martin Mares <mj@atrey.karlin.mff.cuni.cz>;
  */
+
+#include <linux/config.h>
+#include <asm/page.h>
+
 OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
 OUTPUT_ARCH(i386)
 ENTRY(_start)
 SECTIONS
 {
-  . = 0xC0000000 + 0x100000;
+  . = __PAGE_OFFSET + 0x100000;
   _text = .;			/* Text and read-only data */
   .text : {
 	*(.text)
@@ -66,9 +70,6 @@
 
   /* Sections to be discarded */
   /DISCARD/ : {
-	*(.text.exit)
-	*(.data.exit)
-	*(.exitcall.exit)
 	}
 
   /* Stabs debugging sections.  */
diff -Naur linux-2.4.28.pristine/drivers/net/ns83820.c linux-2.4.28/drivers/net/ns83820.c
--- linux-2.4.28.pristine/drivers/net/ns83820.c	2004-11-17 11:54:21.000000000 +0000
+++ linux-2.4.28/drivers/net/ns83820.c	2006-01-14 14:49:31.000000000 +0000
@@ -95,6 +95,13 @@
 #include <linux/module.h>
 #include <linux/types.h>
 #include <linux/pci.h>
+
+#if defined(CONFIG_AFTERBURN)
+#include "../../afterburn/annotate.h"
+#define readl dp83820_read_annotate
+#define writel dp83820_write_annotate
+#endif
+
 #include <linux/netdevice.h>
 #include <linux/etherdevice.h>
 #include <linux/delay.h>
diff -Naur linux-2.4.28.pristine/include/asm-i386/fixmap.h linux-2.4.28/include/asm-i386/fixmap.h
--- linux-2.4.28.pristine/include/asm-i386/fixmap.h	2003-08-25 11:44:43.000000000 +0000
+++ linux-2.4.28/include/asm-i386/fixmap.h	2006-01-14 15:01:13.000000000 +0000
@@ -101,7 +101,11 @@
  * the start of the fixmap, and leave one page empty
  * at the top of mem..
  */
+#if defined(CONFIG_AFTERBURN_RELINK)
+#define FIXADDR_TOP	((unsigned long)CONFIG_AFTERBURN_VADDR_END-0x1000)
+#else
 #define FIXADDR_TOP	(0xffffe000UL)
+#endif
 #define __FIXADDR_SIZE	(__end_of_permanent_fixed_addresses << PAGE_SHIFT)
 #define FIXADDR_START	(FIXADDR_TOP - __FIXADDR_SIZE)
 
diff -Naur linux-2.4.28.pristine/include/asm-i386/io.h linux-2.4.28/include/asm-i386/io.h
--- linux-2.4.28.pristine/include/asm-i386/io.h	2003-06-13 14:51:38.000000000 +0000
+++ linux-2.4.28/include/asm-i386/io.h	2006-01-14 15:01:13.000000000 +0000
@@ -162,9 +162,38 @@
 /*
  * IO bus memory addresses are also 1:1 with the physical address
  */
+#if defined(CONFIG_AFTERBURN_HOOK_DMA)
+extern unsigned long (*afterburn_phys_to_dma_hook)(unsigned long phys);
+extern unsigned long (*afterburn_dma_to_phys_hook)(unsigned long dma);
+
+static inline unsigned long virt_to_bus( void * virt )
+{
+	if( afterburn_phys_to_dma_hook )
+		return afterburn_phys_to_dma_hook(virt_to_phys(virt));
+	else
+		return virt_to_phys(virt);
+}
+
+static inline void * bus_to_virt( unsigned long bus )
+{
+	if( afterburn_dma_to_phys_hook )
+		return phys_to_virt(afterburn_dma_to_phys_hook(bus));
+	else
+		return phys_to_virt(bus);
+}
+
+static inline unsigned long page_to_bus( struct page *page )
+{
+	if( afterburn_phys_to_dma_hook )
+		return afterburn_phys_to_dma_hook(page_to_phys(page));
+	else
+		return page_to_phys(page);
+}
+#else
 #define virt_to_bus virt_to_phys
 #define bus_to_virt phys_to_virt
 #define page_to_bus page_to_phys
+#endif
 
 /*
  * readX/writeX() are used to access memory mapped devices. On some
diff -Naur linux-2.4.28.pristine/include/asm-i386/page.h linux-2.4.28/include/asm-i386/page.h
--- linux-2.4.28.pristine/include/asm-i386/page.h	2002-08-03 00:39:45.000000000 +0000
+++ linux-2.4.28/include/asm-i386/page.h	2006-01-14 15:01:13.000000000 +0000
@@ -51,8 +51,14 @@
 
 typedef struct { unsigned long pgprot; } pgprot_t;
 
+#if !defined(CONFIG_AFTERBURN_XEN_HOOKS)
 #define pmd_val(x)	((x).pmd)
 #define pgd_val(x)	((x).pgd)
+#else
+#include "../../afterburn/annotate.h"
+#define pmd_val(x) pgd_read_annotate( (x).pmd )
+#define pgd_val(x) pgd_read_annotate( (x).pgd )
+#endif
 #define pgprot_val(x)	((x).pgprot)
 
 #define __pte(x) ((pte_t) { (x) } )
@@ -78,7 +84,11 @@
  * and CONFIG_HIGHMEM64G options in the kernel configuration.
  */
 
+#if defined(CONFIG_AFTERBURN_RELINK)
+#define __PAGE_OFFSET		(CONFIG_AFTERBURN_LINK_BASE)
+#else
 #define __PAGE_OFFSET		(0xC0000000)
+#endif
 
 /*
  * This much address space is reserved for vmalloc() and iomap()
@@ -127,8 +137,13 @@
 
 #define PAGE_OFFSET		((unsigned long)__PAGE_OFFSET)
 #define VMALLOC_RESERVE		((unsigned long)__VMALLOC_RESERVE)
+#if defined(CONFIG_AFTERBURN_RELINK)
+#define __MAXMEM		(CONFIG_AFTERBURN_VADDR_END-__PAGE_OFFSET-__VMALLOC_RESERVE)
+#define MAXMEM			((unsigned long)(CONFIG_AFTERBURN_VADDR_END-PAGE_OFFSET-VMALLOC_RESERVE))
+#else
 #define __MAXMEM		(-__PAGE_OFFSET-__VMALLOC_RESERVE)
 #define MAXMEM			((unsigned long)(-PAGE_OFFSET-VMALLOC_RESERVE))
+#endif
 #define __pa(x)			((unsigned long)(x)-PAGE_OFFSET)
 #define __va(x)			((void *)((unsigned long)(x)+PAGE_OFFSET))
 #define virt_to_page(kaddr)	(mem_map + (__pa(kaddr) >> PAGE_SHIFT))
diff -Naur linux-2.4.28.pristine/include/asm-i386/pgtable-2level.h linux-2.4.28/include/asm-i386/pgtable-2level.h
--- linux-2.4.28.pristine/include/asm-i386/pgtable-2level.h	2002-11-28 23:53:15.000000000 +0000
+++ linux-2.4.28/include/asm-i386/pgtable-2level.h	2006-01-14 15:01:13.000000000 +0000
@@ -39,6 +39,16 @@
  * within a page table are directly modified.  Thus, the following
  * hook is made available.
  */
+#if defined(CONFIG_AFTERBURN_XEN_HOOKS)
+#include "../../afterburn/annotate.h"
+#define set_pte(pteptr, pteval) pte_set_annotate( (pteptr), (pteval).pte_low )
+#define set_pgd(pgdptr, pgdval) pgd_set_annotate( (pgdptr), (pgdval).pgd )
+#define set_pmd(pmdptr, pmdval) pmd_set_annotate( (pmdptr), (pmdval).pmd )
+#define set_pte_atomic(pteptr, pteval) set_pte(pteptr,pteval)
+
+
+#else
+
 #define set_pte(pteptr, pteval) (*(pteptr) = pteval)
 #define set_pte_atomic(pteptr, pteval) (*(pteptr) = pteval)
 
@@ -48,6 +58,7 @@
  */
 #define set_pmd(pmdptr, pmdval) (*(pmdptr) = pmdval)
 #define set_pgd(pgdptr, pgdval) (*(pgdptr) = pgdval)
+#endif
 
 #define pgd_page(pgd) \
 ((unsigned long) __va(pgd_val(pgd) & PAGE_MASK))
@@ -56,9 +67,14 @@
 {
 	return (pmd_t *) dir;
 }
+#if defined(CONFIG_AFTERBURN_XEN_HOOKS)
+#define ptep_get_and_clear(xp) pte_read_clear_annotate(xp)
+#define pte_page(x)		(mem_map+((unsigned long)((pte_read_annotate(x) >> PAGE_SHIFT))))
+#else
 #define ptep_get_and_clear(xp)	__pte(xchg(&(xp)->pte_low, 0))
+#define pte_page(x)		(mem_map+((unsigned long)((pte_val(x) >> PAGE_SHIFT))))
+#endif
 #define pte_same(a, b)		((a).pte_low == (b).pte_low)
-#define pte_page(x)		(mem_map+((unsigned long)(((x).pte_low >> PAGE_SHIFT))))
 #define pte_none(x)		(!(x).pte_low)
 #define __mk_pte(page_nr,pgprot) __pte(((page_nr) << PAGE_SHIFT) | pgprot_val(pgprot))
 
diff -Naur linux-2.4.28.pristine/include/asm-i386/pgtable.h linux-2.4.28/include/asm-i386/pgtable.h
--- linux-2.4.28.pristine/include/asm-i386/pgtable.h	2002-11-28 23:53:15.000000000 +0000
+++ linux-2.4.28/include/asm-i386/pgtable.h	2006-01-14 15:01:13.000000000 +0000
@@ -150,6 +150,11 @@
 
 
 #ifndef __ASSEMBLY__
+
+#if defined(CONFIG_AFTERBURN)
+#include "../../afterburn/annotate.h"
+#endif
+
 /* Just any arbitrary offset to the start of the vmalloc VM area: the
  * current 8MB value just means that there will be a 8MB "hole" after the
  * physical memory until the kernel virtual memory starts.  That means that
@@ -296,9 +301,28 @@
 static inline pte_t pte_mkyoung(pte_t pte)	{ (pte).pte_low |= _PAGE_ACCESSED; return pte; }
 static inline pte_t pte_mkwrite(pte_t pte)	{ (pte).pte_low |= _PAGE_RW; return pte; }
 
-static inline  int ptep_test_and_clear_dirty(pte_t *ptep)	{ return test_and_clear_bit(_PAGE_BIT_DIRTY, ptep); }
-static inline  int ptep_test_and_clear_young(pte_t *ptep)	{ return test_and_clear_bit(_PAGE_BIT_ACCESSED, ptep); }
-static inline void ptep_set_wrprotect(pte_t *ptep)		{ clear_bit(_PAGE_BIT_RW, ptep); }
+static inline  int ptep_test_and_clear_dirty(pte_t *ptep)
+{ 
+#if defined(CONFIG_AFTERBURN)
+	return pte_test_and_clear_bit_annotate( _PAGE_BIT_DIRTY, ptep );
+#endif
+	return test_and_clear_bit(_PAGE_BIT_DIRTY, ptep); 
+}
+static inline  int ptep_test_and_clear_young(pte_t *ptep)
+{
+#if defined(CONFIG_AFTERBURN)
+	return pte_test_and_clear_bit_annotate( _PAGE_BIT_ACCESSED, ptep );
+#endif
+	return test_and_clear_bit(_PAGE_BIT_ACCESSED, ptep);
+}
+static inline void ptep_set_wrprotect(pte_t *ptep)
+{
+#if defined(CONFIG_AFTERBURN)
+	pte_test_and_clear_bit_annotate( _PAGE_BIT_RW, ptep );
+	return;
+#endif
+    	clear_bit(_PAGE_BIT_RW, ptep);
+}
 static inline void ptep_mkdirty(pte_t *ptep)			{ set_bit(_PAGE_BIT_DIRTY, ptep); }
 
 /*
diff -Naur linux-2.4.28.pristine/include/linux/sched.h linux-2.4.28/include/linux/sched.h
--- linux-2.4.28.pristine/include/linux/sched.h	2004-11-17 11:54:22.000000000 +0000
+++ linux-2.4.28/include/linux/sched.h	2006-01-14 15:01:13.000000000 +0000
@@ -328,6 +328,10 @@
 	struct list_head local_pages;
 	unsigned int allocation_order, nr_local_pages;
 
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+	void * afterburn_handle;
+#endif
+
 /* task state */
 	struct linux_binfmt *binfmt;
 	int exit_code, exit_signal;
diff -Naur linux-2.4.28.pristine/kernel/exit.c linux-2.4.28/kernel/exit.c
--- linux-2.4.28.pristine/kernel/exit.c	2002-11-28 23:53:15.000000000 +0000
+++ linux-2.4.28/kernel/exit.c	2006-01-14 14:49:31.000000000 +0000
@@ -448,6 +448,12 @@
 	exit_namespace(tsk);
 	exit_sighand(tsk);
 	exit_thread();
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+	{
+	    extern void (*afterburn_exit_hook)( void * handle );
+	    afterburn_exit_hook(tsk->afterburn_handle);
+	}
+#endif
 
 	if (current->leader)
 		disassociate_ctty(1);
diff -Naur linux-2.4.28.pristine/kernel/fork.c linux-2.4.28/kernel/fork.c
--- linux-2.4.28.pristine/kernel/fork.c	2004-11-17 11:54:22.000000000 +0000
+++ linux-2.4.28/kernel/fork.c	2006-01-14 14:49:31.000000000 +0000
@@ -677,6 +677,9 @@
 
 	atomic_inc(&p->user->__count);
 	atomic_inc(&p->user->processes);
+#if defined(CONFIG_AFTERBURN_THREAD_HOOKS)
+	p->afterburn_handle = NULL;
+#endif
 
 	/*
 	 * Counter increases are protected by
